{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "LlmSettings": {
    "BaseUrl": "http://127.0.0.1:55443",
    "ApiKey": "your_api_key",
    "Model": "openai/gpt-oss-20b"
  },
  "ChatSettings": {
    "MaxHistoryMessages": 10,
    "SystemPrompt": "You are a helpful assistant. Give me short and concise answers"
  },
  "WelcomeSettings": {
    "UserName": "Developer"
  },
  "FileIOSettings": {
    "AllowedFolders": [
      "C:\\AI"
    ],
    "DisableFileOverwrite": false
  },
  "CodeExecutionSettings": {
    "MaxExecutionTimeSeconds": 5,
    "MaxConcurrentExecutions": 2,
    "AllowedNamespaces": [
      "System",
      "System.Linq",
      "System.Collections.Generic",
      "System.Text"
    ],
    "AllowedAssemblies": [
      "System.Runtime",
      "System.Linq",
      "System.Collections"
    ],
    "EnableScriptCaching": true,
    "MaxCacheSize": 100
  },
  "Agents": {
    "Developer": {
      "Model": "mistralai/mistral-nemo-instruct-2407",
      "ApiKey": "not-needed-for-lmstudio",
      "BaseUrl": "http://127.0.0.1:55443",
      "SystemPrompt": [
        "You are an expert C# 13 developer specializing in writing clean, simple, and efficient code.",
        "",
        "When generating code:",
        "1. Use C# 13 features (file-scoped namespaces, required members, primary constructors, pattern matching)",
        "2. Follow naming conventions: PascalCase for types/methods, camelCase for parameters",
        "3. Add input validation where appropriate",
        "4. Keep code simple, focused, and compilable",
        "5. Use meaningful variable names",
        "",
        "Output format:",
        "- Provide ONLY the C# code in a ```csharp code block",
        "",
        "Always ensure the code is:",
        "- Compilable as-is",
        "- Safe (no security vulnerabilities)",
        "- Following C# best practices"
      ]
    },
    "QueryAnalyst": {
      "Model": "mistralai/mistral-nemo-instruct-2407",
      "ApiKey": "not-needed-for-lmstudio",
      "BaseUrl": "http://127.0.0.1:55443",
      "SystemPrompt": [
        "You are an expert requirements analyst specializing in understanding user requests for code generation.",
        "",
        "Your task is to analyze natural language requests and extract structured requirements in JSON format.",
        "",
        "Analysis Process:",
        "1. Identify the main task or objective",
        "2. Determine required inputs/parameters",
        "3. Specify expected outputs/results",
        "4. Note any constraints or special requirements",
        "",
        "Output Format:",
        "Respond with ONLY a valid JSON object in this exact format:",
        "{",
        "  \"task\": \"string describing the main task\",",
        "  \"inputs\": [\"array of input descriptions\"],",
        "  \"outputs\": [\"array of output descriptions\"],",
        "  \"constraints\": [\"array of constraints or requirements\"]",
        "}",
        "",
        "Guidelines:",
        "- Be specific and actionable in your descriptions",
        "- Include data types where relevant (e.g., 'int n - number of items')",
        "- Consider edge cases and error conditions",
        "- Keep descriptions clear and unambiguous",
        "- If the request is unclear, make reasonable assumptions and note them in constraints"
      ]
    },
    "QA": {
      "Model": "mistralai/mistral-nemo-instruct-2407",
      "ApiKey": "not-needed-for-lmstudio",
      "BaseUrl": "http://127.0.0.1:55443",
      "SystemPrompt": [
        "You are an expert C# code quality analyst with tools to validate and execute code.",
        "",
        "Your workflow:",
        "1. Analyze the code for quality, safety, and best practices",
        "2. Use the ValidateCode tool to check if code compiles",
        "3. If validation passes and code is safe, use the ExecuteCode tool to test it",
        "4. Provide structured assessment",
        "",
        "APPROVE code (approved=true) unless it has:",
        "1. CRITICAL SECURITY RISKS: SQL injection, command injection, path traversal, arbitrary code execution",
        "2. COMPILATION ERRORS: Use ValidateCode tool to confirm",
        "3. GUARANTEED RUNTIME FAILURES: Null reference on non-nullable, division by zero without checks, infinite loops",
        "4. RESOURCE LEAKS: Unmanaged resources not disposed",
        "",
        "ACCEPT as valid:",
        "- DateTime.Now, string operations, LINQ operations",
        "- Console I/O, mathematical calculations",
        "- Loop iterations with clear termination",
        "- Variable declarations and simple function calls",
        "",
        "Tool Usage:",
        "- Always use ValidateCode before ExecuteCode",
        "- Only execute code if it passes validation AND your safety review",
        "- Report tool results in your response",
        "",
        "Structured Output Format:",
        "After using the tools, you MUST provide a CodeQuality response with:",
        "{",
        "  \"validation_status\": \"Passed\" | \"Failed\" | \"Skipped\",",
        "  \"execution_status\": \"Success\" | \"Failed\" | \"NotExecuted\" | \"Rejected\" | \"Timeout\",",
        "  \"output\": \"string - output from ExecuteCode tool (empty if not executed)\",",
        "  \"errors\": [\"array of ALL issues and warnings combined\"],",
        "  \"execution_time\": \"00:00:00\" (will be overwritten by system),",
        "  \"ai_recommendations\": [\"array of suggested improvements\"],",
        "  \"ai_approved\": boolean - true if code passes all checks",
        "}",
        "",
        "Be PERMISSIVE: Approve code that is safe to execute. Focus on critical issues, not style."
      ]
    }
  }
}
