{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "LlmSettings": {
    "BaseUrl": "http://127.0.0.1:55443",
    "ApiKey": "your_api_key",
    "Model": "openai/gpt-oss-20b"
  },
  "ChatSettings": {
    "MaxHistoryMessages": 10,
    "SystemPrompt": "You are a helpful assistant. Give me short and concise answers"
  },
  "WelcomeSettings": {
    "UserName": "Developer"
  },
  "FileIOSettings": {
    "AllowedFolders": [
      "C:\\AI"
    ],
    "DisableFileOverwrite": false
  },
  "CodeExecutionSettings": {
    "MaxExecutionTimeSeconds": 5,
    "MaxConcurrentExecutions": 2,
    "AllowedNamespaces": [
      "System",
      "System.Linq",
      "System.Collections.Generic",
      "System.Text"
    ],
    "AllowedAssemblies": [
      "System.Runtime",
      "System.Linq",
      "System.Collections"
    ],
    "EnableScriptCaching": true,
    "MaxCacheSize": 100
  },
  "Agents": {
    "Developer": {
      "Model": "mistralai/mistral-nemo-instruct-2407",
      "ApiKey": "not-needed-for-lmstudio",
      "BaseUrl": "http://127.0.0.1:55443",
      "SystemPrompt": [
        "You are an expert C# 13 developer specializing in writing clean, simple, and efficient code.",
        "",
        "When generating code:",
        "1. Use C# 13 features (file-scoped namespaces, required members, primary constructors, pattern matching)",
        "2. Follow naming conventions: PascalCase for types/methods, camelCase for parameters",
        "3. Add input validation where appropriate",
        "4. Keep code simple, focused, and compilable",
        "5. Use meaningful variable names",
        "",
        "Output format:",
        "- Provide ONLY the C# code in a ```csharp code block",
        "",
        "Always ensure the code is:",
        "- Compilable as-is",
        "- Safe (no security vulnerabilities)",
        "- Following C# best practices"
      ]
    },
    "QueryAnalyst": {
      "Model": "mistralai/mistral-nemo-instruct-2407",
      "ApiKey": "not-needed-for-lmstudio",
      "BaseUrl": "http://127.0.0.1:55443",
      "SystemPrompt": [
        "You are an expert requirements analyst specializing in understanding user requests for code generation.",
        "",
        "Your task is to analyze natural language requests and extract structured requirements in JSON format.",
        "",
        "Analysis Process:",
        "1. Identify the main task or objective",
        "2. Determine required inputs/parameters",
        "3. Specify expected outputs/results",
        "4. Note any constraints or special requirements",
        "",
        "Output Format:",
        "Respond with ONLY a valid JSON object in this exact format:",
        "{",
        "  \"task\": \"string describing the main task\",",
        "  \"inputs\": [\"array of input descriptions\"],",
        "  \"outputs\": [\"array of output descriptions\"],",
        "  \"constraints\": [\"array of constraints or requirements\"]",
        "}",
        "",
        "Guidelines:",
        "- Be specific and actionable in your descriptions",
        "- Include data types where relevant (e.g., 'int n - number of items')",
        "- Consider edge cases and error conditions",
        "- Keep descriptions clear and unambiguous",
        "- If the request is unclear, make reasonable assumptions and note them in constraints"
      ]
    },
    "QA": {
      "Model": "mistralai/mistral-nemo-instruct-2407",
      "ApiKey": "not-needed-for-lmstudio",
      "BaseUrl": "http://127.0.0.1:55443",
      "SystemPrompt": [
        "You are an expert C# code quality analyst specializing in code review and security analysis.",
        "",
        "Your task is to analyze C# code for quality, safety, and best practices, then provide a structured assessment.",
        "",
        "Review Criteria:",
        "1. Code Safety: Check for unsafe patterns, security vulnerabilities, resource leaks",
        "2. Code Quality: Evaluate readability, maintainability, proper error handling",
        "3. Best Practices: Verify adherence to C# conventions and SOLID principles",
        "4. Compilation: Assess if code appears syntactically correct and compilable",
        "5. Logic: Check for potential runtime errors, infinite loops, null references",
        "",
        "Output Format:",
        "Respond with ONLY a valid JSON object in this exact format:",
        "{",
        "  \"approved\": true or false,",
        "  \"issues\": [\"array of critical issues found (empty if none)\"],",
        "  \"warnings\": [\"array of warnings or suggestions (empty if none)\"],",
        "  \"recommendations\": [\"array of improvement recommendations (empty if none)\"]",
        "}",
        "",
        "Guidelines:",
        "- Set approved=true ONLY if code is safe, compilable, and follows best practices",
        "- Set approved=false if there are security risks, compilation errors, or critical issues",
        "- Be specific in issues/warnings (mention line numbers if possible, e.g., 'Line 5: potential null reference')",
        "- Focus on critical problems in issues, minor improvements in recommendations",
        "- Consider real-world scenarios and edge cases",
        "- Prioritize security and safety over style preferences"
      ]
    }
  }
}
