@page "/test/qa"
@rendermode InteractiveServer
@using AI.Agents.QualityAssurance
@using AI.Agents.CodeGeneration
@inherits ComponentBase

<div class="qa-container">
    <div class="qa-header">
        <h3>
            <span class="badge bg-warning">üîç</span> QA Agent
        </h3>
        <p class="header-description">Test the quality assurance agent that validates and executes C# code.</p>
    </div>

    <div class="code-input-section">
        <label class="code-input-label">C# Code to Test:</label>
        <textarea @bind="CodeInput" rows="15" class="form-control code-textarea" placeholder="Enter C# code here..."></textarea>
    </div>

    <div class="action-buttons">
        <button @onclick="Validate" class="test-btn" disabled="@IsTesting">
            @if (IsTesting) 
            { 
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                <span>Testing...</span> 
            } 
            else 
            { 
                <span>üîç Validate</span> 
            }
        </button>
    </div>

    <div class="example-codes">
        <label class="example-codes-label">üìù Example Code</label>
        <div class="codes-group">
            <button @onclick="() => LoadExample(ExampleValid)" 
                    class="code-btn code-btn-success" 
                    disabled="@IsTesting"
                    title="Valid code that executes successfully">
                ‚úÖ Valid Code
            </button>
            <button @onclick="() => LoadExample(ExampleSyntaxError)" 
                    class="code-btn code-btn-danger" 
                    disabled="@IsTesting"
                    title="Code with compilation errors">
                ‚ùå Syntax Error
            </button>
            <button @onclick="() => LoadExample(ExampleRuntimeError)" 
                    class="code-btn code-btn-danger" 
                    disabled="@IsTesting"
                    title="Code that throws runtime exception">
                üí• Runtime Error
            </button>
        </div>
        <div class="codes-group">
            <button @onclick="() => LoadExample(ExampleLoop)" 
                    class="code-btn code-btn-info" 
                    disabled="@IsTesting"
                    title="Code with iteration">
                üîÑ Loop Example
            </button>
            <button @onclick="() => LoadExample(ExampleDateTime)" 
                    class="code-btn code-btn-info" 
                    disabled="@IsTesting"
                    title="Code working with dates">
                üìÖ DateTime
            </button>
            <button @onclick="() => LoadExample(ExampleMath)" 
                    class="code-btn code-btn-info" 
                    disabled="@IsTesting"
                    title="Mathematical calculations">
                üî¢ Math Operations
            </button>
        </div>
    </div>

    @if (TestResult != null)
    {
        <div class="test-result">
            <h4>Test Results:</h4>
            <div class="@GetResultClass()">
                @if (TestResult.IsSuccess && TestResult.Data != null)
                {
                    var quality = TestResult.Data;
                    
                    <div class="result-header">
                        <h5>
                            @if (quality.IsSuccessful)
                            {
                                <span>‚úÖ Quality Check Passed</span>
                            }
                            else
                            {
                                <span>‚ùå Quality Check Failed</span>
                            }
                        </h5>
                        <div class="status-badges">
                            <span class="badge @GetValidationStatusClass(quality.ValidationStatus)">
                                Validation: @quality.ValidationStatus
                            </span>
                            <span class="badge @GetExecutionStatusClass(quality.ExecutionStatus)">
                                Execution: @quality.ExecutionStatus
                            </span>
                            <span class="badge bg-info">
                                Time: @quality.ExecutionTime.TotalMilliseconds.ToString("F2")ms
                            </span>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(quality.Output))
                    {
                        <div class="output-section">
                            <h6>üì§ Output</h6>
                            <pre class="output-block">@quality.Output</pre>
                        </div>
                    }

                    @if (quality.Errors.Any())
                    {
                        <div class="errors-section">
                            <h6>‚ö†Ô∏è Errors</h6>
                            <ul class="error-list">
                                @foreach (var error in quality.Errors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="ai-feedback-section">
                        <h6>ü§ñ AI Analysis</h6>
                        <div class="ai-status">
                            @if (quality.AiApproved)
                            {
                                <span class="badge bg-success">‚úÖ AI Approved</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">‚ùå AI Rejected</span>
                            }
                        </div>
                        @if (quality.AiRecommendations.Any())
                        {
                            <div class="recommendations-list">
                                <strong>Recommendations:</strong>
                                <ul>
                                    @foreach (var recommendation in quality.AiRecommendations)
                                    {
                                        <li>@recommendation</li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <h5>‚ùå Test Failed</h5>
                    <pre class="mb-0">@TestResult.ErrorMessage</pre>
                }
            </div>
        </div>
    }

</div>