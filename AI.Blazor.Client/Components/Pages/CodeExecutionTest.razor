@page "/code-test"
@rendermode InteractiveServer
@using AI.Shared.Services.CodeExecution
@using AI.Shared.Services.CodeExecution.Models
@inherits ComponentBase

<div class="code-execution-container">
    <div class="code-execution-header">
        <h3>
            <span class="badge bg-primary">üöÄ</span> Code Execution
        </h3>
    </div>

    <div class="security-warning">
        <span class="security-warning-icon">üîí</span>
        <div class="security-warning-content">
            <strong>Security Warning:</strong> This agent executes code with full application permissions.
            Only use with trusted code in development environments.
        </div>
    </div>

    <div class="code-input-section">
        <label class="code-input-label">C# Code:</label>
        <textarea @bind="Code" 
                  rows="8" 
                  class="code-textarea" 
                  style="resize: vertical; min-height: 120px;"
                  placeholder="Enter C# code here..."></textarea>
    </div>

    <div class="action-buttons">
        <button @onclick="ExecuteCode" class="execute-btn" disabled="@IsExecuting">
            @if (IsExecuting) 
            { 
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                <span>Executing...</span> 
            } 
            else 
            { 
                <span>‚ñ∂Ô∏è Execute Code</span> 
            }
        </button>
        <button @onclick="ValidateCode" class="validate-btn" disabled="@IsExecuting">
            üîç Validate Only
        </button>
    </div>

    <div class="example-snippets">
        <label class="example-snippets-label">üìù Example Code Snippets</label>
        <div class="snippet-group">
            <button @onclick='() => LoadExample("1 + 2")' 
                    class="snippet-btn snippet-btn-success" 
                    disabled="@IsExecuting"
                    title="Simple arithmetic operation">
                ‚ûï Simple Math
            </button>
            <button @onclick='() => LoadExample("Enumerable.Range(1, 10).Sum()")' 
                    class="snippet-btn snippet-btn-success" 
                    disabled="@IsExecuting"
                    title="LINQ query example">
                üî¢ LINQ Sum
            </button>
            <button @onclick='() => LoadExample("\"Hello World\".ToUpper()")' 
                    class="snippet-btn snippet-btn-success" 
                    disabled="@IsExecuting"
                    title="String manipulation">
                üìù String
            </button>
            <button @onclick='() => LoadExample("var x = 10;\nvar y = 20;\nx + y")' 
                    class="snippet-btn snippet-btn-success" 
                    disabled="@IsExecuting"
                    title="Multiple statements">
                üìã Multi-line
            </button>
        </div>
        <div class="snippet-group">
            <button @onclick='() => LoadExample("1 / 0")' 
                    class="snippet-btn snippet-btn-danger" 
                    disabled="@IsExecuting"
                    title="Runtime error example">
                üí• Div by Zero
            </button>
            <button @onclick='() => LoadExample("invalid code here")' 
                    class="snippet-btn snippet-btn-danger" 
                    disabled="@IsExecuting"
                    title="Compilation error example">
                ‚ö†Ô∏è Invalid Syntax
            </button>
        </div>
    </div>

    @if (ExecutionResult != null)
    {
        <div class="execution-result">
            <h4>Execution Result:</h4>
            <div class="@(ExecutionResult.IsSuccess ? "result-success" : "result-error")">
                @if (ExecutionResult.IsSuccess && ExecutionResult.Data != null)
                {
                    <h5>‚úÖ Success</h5>
                    <p><strong>Return Value:</strong> <code>@ExecutionResult.Data.ReturnValue</code></p>
                    <p><strong>Type:</strong> <code>@ExecutionResult.Data.ReturnValue?.GetType().Name</code></p>
                    <p><strong>Execution Time:</strong> @ExecutionResult.Data.ExecutionTime.TotalMilliseconds ms</p>
                }
                else
                {
                    <h5>‚ùå Error</h5>
                    <pre class="mb-0">@ExecutionResult.ErrorMessage</pre>
                }
            </div>
        </div>
    }

    @if (ValidationResult != null)
    {
        <div class="validation-result">
            <h4>Validation Result:</h4>
            <div class="@(ValidationResult.IsSuccess ? "validation-success" : "validation-error")">
                @if (ValidationResult.IsSuccess)
                {
                    <h5>‚úÖ Code is valid</h5>
                    <p class="mb-0">The code compiles successfully without errors.</p>
                }
                else
                {
                    <h5>‚ö†Ô∏è Compilation Errors</h5>
                    <pre class="mb-0">@ValidationResult.ErrorMessage</pre>
                }
            </div>
        </div>
    }

</div>